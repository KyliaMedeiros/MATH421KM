AGE = na_if(AGE, NA),
TRAV_SP = na_if(TRAV_SP, NA)) %>%
filter(SEAT_POS == "Front Seat, Left Side") %>%
drop_na(AGE, TRAV_SP)
library(readxl)
library(tidyverse)
df <- read_excel('c2015.xlsx')
colSums(df == 'SEX', na.rm = TRUE)
df <- replace(df, df == 'Unknown' |
df == 'Not Rep' |
df == 'Not Available', NA)
majority_sex <-names(which.max(table(df$SEX)))
df$SEX <- replace_na(df$SEX, majority_sex)
table(df$SEX)
df$AGE <- na_if(df$AGE, "")
df$AGE <- na_if(df$AGE, "N/A")
table(df$AGE, useNA = "ifany")
df$AGE <- str_replace(df$AGE, "Less than 1", "0")
table(df$AGE, useNA = "ifany")
class(df$AGE)
df$AGE <- as.numeric(df$AGE)
class(df$AGE)
mean_age <- mean(df$AGE, na.rm = TRUE)
df$AGE[is.na(df$AGE)] <- mean_age
sum(is.na(df$AGE))
table(df$TRAV_SP, useNA = "ifany")
df$TRAV_SP <- str_remove(df$TRAV_SP, "MPH")
table(df$TRAV_SP, useNA = "ifany")
df <- df %>%
filter(TRAV_SP != "Greater") %>%
drop_na(TRAV_SP)
table(df$TRAV_SP, useNA = "ifany")
df$TRAV_SP <- str_replace(df$TRAV_SP, "Stopped", "0")
table(df$TRAV_SP, useNA = "ifany")
df$TRAV_SP <- na_if(df$TRAV_SP, "")
df$TRAV_SP <- na_if(df$TRAV_SP, "N/A")
sum(is.na(df$TRAV_SP))
df$TRAV_SP <- as.numeric(df$TRAV_SP)
class(df$TRAV_SP)
median_trav_sp <- median(df$TRAV_SP, na.rm = TRUE)
df$TRAV_SP <- replace_na(df$TRAV_SP, median_trav_sp)
cleaned_data <- df %>%
mutate(
AGE = na_if(AGE, NA),
TRAV_SP = na_if(TRAV_SP, NA)) %>%
filter(SEAT_POS == "Front Seat, Left Side") %>%
drop_na(AGE, TRAV_SP)
cleaned_data <- df %>%
mutate(
AGE = na_if(AGE, NA),
TRAV_SP = na_if(TRAV_SP, NA)) %>%
filter(SEAT_POS == "Front Seat, Left Side") %>%
drop_na(AGE, TRAV_SP)
cor(cleaned_data$AGE, cleaned_data$TRAV_SP)
library(ggplot2)
df <- read_csv('covid_data')
library(ggplot2)
df <- read_csv('covid_data.csv')
library(ggplot2)
read.csv(covid_data.csv)
library(ggplot2)
read.csv('covid_data.csv')
library(ggplot2)
df<-read.csv('covid_data.csv')
names(df)
df %>% ggplot()+
geom_density(mapping = aes(x=total_cases))
library(ggplot2)
library(df %>% ggplot()+)
library(ggplot2)
library(ggplot)
df %>% ggplot()+
geom_point(mapping=aes(x=location, y=total_cases))
df ggplot()+
df  %>% ggplot()+
geom_point(mapping=aes(x=location, y=total_cases))
library(ggplot2)
library(knitr)
library(tidyverse)
df<-read.csv('covid_data.csv')
names(df)
df %>% ggplot()+
geom_point(mapping=aes(x=location, y=total_cases))
df %>% ggplot()+
geom_point(mapping=aes(x=aged_70_older, y=total_cases))
df %>% ggplot()+
geom_point(mapping=aes(x=aged_70_older, y=positive_rate))
df %>% ggplot()+
geom_point(mapping=aes(x=aged_70_older, y=total_deaths))
df %>% ggplot()+
geom_point(mapping=aes(x=aged_70_older, y=total_cases))
df %>% ggplot()+
geom_point(mapping=aes(x=aged_70_older, y=positive_rate))
names(df)
df %>% ggplot()+
geom_point(mapping=aes(x=aged_70_older, y=date))
library(ggplot2)
library(knitr)
library(tidyverse)
df<-read.csv('student_sleep_patterns.csv')
names(df)
df %>% ggplot()+
geom_point(mapping=aes(x=Age, y=Sleep_Quality))
df %>% ggplot()+
geom_point(mapping=aes(x=Age, y=Study_Hours))
df %>% ggplot()+
geom_point(mapping=aes(x=Age, y=Weekday_Sleep_Start))
df %>% ggplot()+
geom_point(mapping=aes(x=Age, y=Sleep_Duration))
df %>% ggplot()+
geom_density(mapping = aes(x=Age))
df %>% ggplot()+
geom_density(mapping = aes(x=Age, y=Gender))
df %>% ggplot()+
geom_density(mapping = aes(x=Gender, y=Age))
df %>% ggplot()+
geom_point(mapping=aes(x=Age, y=Sleep_Duration))
df %>% ggplot()+
geom_point(mapping=aes(x=Age, y=Study_Hours))
df %>% ggplot()+
geom_point(mapping=aes(x=Age, y=Sleep_Duration))
table(df)
library(ggplot2)
library(knitr)
library(tidyverse)
df<-read.csv('ds_salaries.csv')
names(df)
df %>% ggplot()+
geom_density(mapping = aes(x=remote_ratio))
df %>% ggplot()+
geom_density(mapping = aes(x=salary))
df %>% ggplot()+
geom_density(mapping = aes(x=remote_ratio))
df %>% ggplot()+
geom_histogram(mapping = aes(x=salary_in_usd))
df %>% ggplot()+
geom_histogram(mapping = aes(x=salary_in_usd))
df %>% ggplot()+
geom_boxplot(mapping = aes(x=salary_in_usd))
df %>% ggplot()+
geom_bar(mapping = aes(x=remote_ratio))
df %>% ggplot()+geom_point(aes(x=work_year, y=salary))
df %>% ggplot()+geom_line(aes(x=work_year, y=salary))
df %>% ggplot()+geom_smooth(aes(x=work_year, y=salary))
df %>% ggplot()+
geom_density(mapping = aes(x=salary , color=experience_level))
df %>% ggplot()+
geom_boxplot(mapping = aes(x=salary , y=employment_type))
df %>% ggplot()+
geom_bar(mapping=aes(x=employment_type , fill=experience_level), position = 'fill')
-df %>% ggplot() + geom_point(aes(x=work_year, y=salary, color=experience_level))
df %>% ggplot() + geom_point(aes(x=work_year, y=salary, color=experience_level))
df %>% ggplot()+
geom_density(mapping = aes(x=remote_ratio))
library(tidyverse)
library(knitr)
library(ggplot2)
df <- read_csv('ds_salaries.csv')
names(df)
df
ggplot(df, aes(x = work_year, y = salary)) +
geom_point() +
facet_wrap(~ experience_level)
ggplot(df, aes(x = work_year, y = salary)) +
geom_point() +
facet_wrap(~ experience_level + employment_type)
df %>% ggplot()+
geom_bar(mapping=aes(x = work_year , fill = remote_ratio),
position = 'dodge')
df %>% ggplot()+
geom_bar(mapping=aes(x = work_year , fill = remote_ratio),
position = 'fill')
df %>%
ggplot()+
geom_col(mapping=aes(x = experience_level, y = salary))
df %>% ggplot()+
geom_bar(mapping=aes(x = work_year , fill = remote_ratio))+
theme_dark()
df %>%
filter(work_year == 2020, remote_ratio == 0)
ggplot(df, aes(x = work_year, y = remote_ratio)) +
geom_col()
df %>%
group_by(experience_level) %>%
summarise(averageSalary = mean(salary, na.rm=TRUE)) %>%
ggplot()+
geom_col(mapping=aes(x = experience_level, y = averageSalary))
gg <- df %>%
group_by(experience_level) %>%
summarise(averageSalary = mean(salary, na.rm=TRUE)) %>%
ggplot()+
geom_col(mapping=aes(x = experience_level, y = averageSalary))
gg <- df %>%
group_by(experience_level) %>%
summarise(averageSalary = mean(salary, na.rm=TRUE)) %>%
ggplot()+
geom_col(mapping=aes(x = experience_level, y = averageSalary))
gg <- df %>%
group_by(experience_level) %>%
summarise(averageSalary = mean(salary, na.rm=TRUE)) %>%
ggplot()+
geom_col(mapping=aes(x = experience_level, y = averageSalary))
table(gg)
df
df<-read.csv('ds_salaries.csv')
ggplot(df, aes(x = work_year, y = salary)) +
geom_point() +
facet_wrap(~ experience_level)
`
comment: This graph is showing the relationsip and influence of years worked compared to salaries
-Make a plot using facet_wrap by two categorical variables (facet_wrap(~variable1+variable2))
```{r}
ggplot(df, aes(x = work_year, y = salary)) +
geom_point() +
facet_wrap(~ experience_level)
library(tidyverse)
library(knitr)
library(ggplot2)
df <- read_csv('ds_salaries.csv')
names(df)
df
ggplot(df, aes(x = work_year, y = salary)) +
geom_point() +
facet_wrap(~ experience_level)
-Make a plot using facet_wrap by two categorical variables (facet_wrap(~variable1+variable2))
ggplot(df, aes(x = work_year, y = salary)) +
geom_point() +
facet_wrap(~ experience_level + employment_type)
df %>% ggplot()+
geom_bar(mapping=aes(x = work_year , fill = remote_ratio),
position = 'dodge')
gg <- df %>%
group_by(experience_level) %>%
summarise(averageSalary = mean(salary, na.rm=TRUE)) %>%
ggplot()+
geom_col(mapping=aes(x = experience_level, y = averageSalary))
library(tidyverse)
library(knitr)
library(ggplot2)
df <- read_csv('ds_salaries.csv')
names(df)
df
ggplot(df, aes(x = work_year, y = salary)) +
geom_point() +
facet_wrap(~ experience_level)
ggplot(df, aes(x = work_year, y = salary)) +
geom_point() +
facet_wrap(~ experience_level + employment_type)
df %>% ggplot()+
geom_bar(mapping=aes(x = work_year , fill = remote_ratio),
position = 'dodge')
df %>% ggplot()+
geom_bar(mapping=aes(x = work_year , fill = remote_ratio),
position = 'fill')
df %>%
ggplot()+
geom_col(mapping=aes(x = experience_level, y = salary))
df %>% ggplot()+
geom_bar(mapping=aes(x = work_year , fill = remote_ratio))+
theme_dark()
df %>%
filter(work_year == 2020, remote_ratio == 0)
ggplot(df, aes(x = work_year, y = remote_ratio)) +
geom_col()
df %>%
group_by(experience_level) %>%
summarise(averageSalary = mean(salary, na.rm=TRUE)) %>%
ggplot()+
geom_col(mapping=aes(x = experience_level, y = averageSalary))
gg <- df %>%
group_by(experience_level) %>%
summarise(averageSalary = mean(salary, na.rm=TRUE)) %>%
ggplot()+
geom_col(mapping=aes(x = experience_level, y = averageSalary))
table(gg)
library(tidyverse)
library(knitr)
library(ggplot2)
df <- read_csv('ds_salaries.csv')
names(df)
df
ggplot(df, aes(x = work_year, y = salary)) +
geom_point() +
facet_wrap(~ experience_level)
ggplot(df, aes(x = work_year, y = salary)) +
geom_point() +
facet_wrap(~ experience_level + employment_type)
df %>% ggplot()+
geom_bar(mapping=aes(x = work_year , fill = remote_ratio),
position = 'dodge')
df %>% ggplot()+
geom_bar(mapping=aes(x = work_year , fill = remote_ratio),
position = 'fill')
df %>%
ggplot()+
geom_col(mapping=aes(x = experience_level, y = salary))
df %>% ggplot()+
geom_bar(mapping=aes(x = work_year , fill = remote_ratio))+
theme_dark()
df %>%
filter(work_year == 2020, remote_ratio == 0)
ggplot(df, aes(x = work_year, y = remote_ratio)) +
geom_col()
df %>%
group_by(experience_level) %>%
summarise(averageSalary = mean(salary, na.rm=TRUE)) %>%
ggplot()+
geom_col(mapping=aes(x = experience_level, y = averageSalary))
gg <- df %>%
group_by(experience_level) %>%
summarise(averageSalary = mean(salary, na.rm=TRUE)) %>%
ggplot()+
geom_col(mapping=aes(x = experience_level, y = averageSalary))
install.packages('mlbench')
install.packages('glmnet')
library(mlbench)
library(tidyverse)
data(PimaIndiansDiabetes)
df <- tibble(PimaIndiansDiabetes)
names(df)
df <- df %>%
select(-pedigree, -triceps, -pressure, -glucose)
df <- df %>%
rename(target = diabetes)
df <- df %>%
mutate(target = as.factor(target))
library(caret)
df$age[is.na(df$age)] = mean(df$age, na.rm = TRUE)
splitIndex <- createDataPartition(df$target, p = .70,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[ splitIndex,]
model1 <- train(target~., data=df_train,
method = "rpart2",
maxdepth=3)
pred <- predict(model1, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
varImp(model1)
plot(varImp(model1))
model2 <- train(target~., data=df_train,
method = "rf",
ntree = 1000)
pred <- predict(model2, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
varImp(model2)
plot(varImp(model2))
library('glmnet')
df$age[is.na(df$age)] = mean(df$age, na.rm = TRUE)
splitIndex <- createDataPartition(df$target, p = .70,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[ splitIndex,]
model1 <- train(target~., data=df_train,
method = "glmnet")
pred <- predict(model1, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
varImp(model1)
plot(varImp(model1))
model2 <- train(target~., data=df_train,
method = "rf",
ntree = 1000)
pred <- predict(model2, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
varImp(model2)
plot(varImp(model2))
library('glmnet')
df$age[is.na(df$age)] = mean(df$age, na.rm = TRUE)
splitIndex <- createDataPartition(df$target, p = .70,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[ splitIndex,]
model1 <- train(target~., data=df_train,
method = "glmnet")
pred <- predict(model1, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
varImp(model1)
plot(varImp(model1))
library('ada')
install.packages('mlbench')
install.packages('glmnet')
install.packages('ada')
library('ada')
df$age[is.na(df$age)] = mean(df$age, na.rm = TRUE)
splitIndex <- createDataPartition(df$target, p = .70,
list = FALSE)
library('ada')
df$age[is.na(df$age)] = mean(df$age, na.rm = TRUE)
splitIndex <- createDataPartition(df$target, p = .70,
list = FALSE)
install.packages('mlbench')
install.packages('glmnet')
install.packages('ada')
install.packages('createDataPartition')
install.packages("ada")
library('ada')
df$age[is.na(df$age)] = mean(df$age, na.rm = TRUE)
splitIndex <- createDataPartition(df$target, p = .70,
list = FALSE)
names(df)
model1 <- train(target~., data=df_train,
method = "rpart2",
maxdepth=3)
install.packages('mlbench')
install.packages('glmnet')
install.packages('ada')
install.packages('createDataPartition')
library(mlbench)
library(tidyverse)
data(PimaIndiansDiabetes)
df <- tibble(PimaIndiansDiabetes)
names(df)
df <- df %>%
select(-pedigree, -triceps, -pressure, -glucose)
plot(varImp(model1))
plot(varImp(model1))
install.packages('mlbench')
install.packages('glmnet')
install.packages('ada')
install.packages('createDataPartition')
install.packages('mlbench')
install.packages('glmnet')
install.packages('ada')
install.packages('createDataPartition')
library(mlbench)
library(tidyverse)
install.packages("glmnet")
data(PimaIndiansDiabetes)
df <- tibble(PimaIndiansDiabetes)
names(df)
df <- df %>%
select(-pedigree, -triceps, -pressure, -glucose)
df <- df %>%
rename(target = diabetes)
df <- df %>%
mutate(target = as.factor(target))
library(caret)
df$age[is.na(df$age)] = mean(df$age, na.rm = TRUE)
splitIndex <- createDataPartition(df$target, p = .70,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[ splitIndex,]
model1 <- train(target~., data=df_train,
method = "rpart2",
maxdepth=3)
pred <- predict(model1, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
varImp(model1)
plot(varImp(model1))
model2 <- train(target~., data=df_train,
method = "rf",
ntree = 1000)
pred <- predict(model2, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
varImp(model2)
plot(varImp(model2))
library('glmnet')
df$age[is.na(df$age)] = mean(df$age, na.rm = TRUE)
splitIndex <- createDataPartition(df$target, p = .70,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[ splitIndex,]
model1 <- train(target~., data=df_train,
method = "glmnet")
pred <- predict(model1, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
varImp(model1)
plot(varImp(model1))
model2 <- train(target~., data=df_train,
method = "rf",
ntree = 1000)
pred <- predict(model2, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
varImp(model2)
plot(varImp(model2))
library('glmnet')
df$age[is.na(df$age)] = mean(df$age, na.rm = TRUE)
splitIndex <- createDataPartition(df$target, p = .70,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[ splitIndex,]
model1 <- train(target~., data=df_train,
method = "glmnet")
pred <- predict(model1, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
varImp(model1)
plot(varImp(model1))
library('ada')
df$age[is.na(df$age)] = mean(df$age, na.rm = TRUE)
splitIndex <- createDataPartition(df$target, p = .70,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[ splitIndex,]
model1 <- train(target~., data=df_train,
method = "ada")
pred <- predict(model1, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target, positive = "pos")
cm$overall[1]
install.packages("flexdashboard")
install.packages("flexdashboard")
install.packages("flexdashboard")
install.packages("flexdashboard")
remove.packages("fastmap")
